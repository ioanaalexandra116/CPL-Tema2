// Generated from C:/Users/Alexandra/Documents/cpl/Tema2/Tema2/src/cool/lexer/CoolLexer.g4 by ANTLR 4.13.1

    package cool.lexer;	

import org.antlr.v4.runtime.Lexer;
import org.antlr.v4.runtime.CharStream;
import org.antlr.v4.runtime.Token;
import org.antlr.v4.runtime.TokenStream;
import org.antlr.v4.runtime.*;
import org.antlr.v4.runtime.atn.*;
import org.antlr.v4.runtime.dfa.DFA;
import org.antlr.v4.runtime.misc.*;

@SuppressWarnings({"all", "warnings", "unchecked", "unused", "cast", "CheckReturnValue", "this-escape"})
public class CoolLexer extends Lexer {
	static { RuntimeMetaData.checkVersion("4.13.1", RuntimeMetaData.VERSION); }

	protected static final DFA[] _decisionToDFA;
	protected static final PredictionContextCache _sharedContextCache =
		new PredictionContextCache();
	public static final int
		ERROR=1, IF=2, THEN=3, ELSE=4, FI=5, WHILE=6, LOOP=7, POOL=8, CASE=9, 
		ESAC=10, OF=11, ARROW=12, LET=13, IN=14, NEW=15, CLASS=16, INHERITS=17, 
		DOT=18, AT=19, LBRACE=20, LPAREN=21, RBRACE=22, RPAREN=23, PLUS=24, MINUS=25, 
		MULT=26, DIV=27, TILDA=28, NOT=29, ISVOID=30, LT=31, EQ=32, LE=33, COLON=34, 
		SEMI=35, COMMA=36, ASSIGN=37, LINE_COMMENT=38, BLOCK_COMMENT=39, BL_COM_START=40, 
		BL_COM_END=41, TYPE=42, ID=43, INT=44, BOOL=45, STRING=46, WS=47, INVALID_CHAR=48;
	public static String[] channelNames = {
		"DEFAULT_TOKEN_CHANNEL", "HIDDEN"
	};

	public static String[] modeNames = {
		"DEFAULT_MODE"
	};

	private static String[] makeRuleNames() {
		return new String[] {
			"IF", "THEN", "ELSE", "FI", "WHILE", "LOOP", "POOL", "CASE", "ESAC", 
			"OF", "ARROW", "LET", "IN", "NEW", "CLASS", "INHERITS", "DOT", "AT", 
			"LBRACE", "LPAREN", "RBRACE", "RPAREN", "PLUS", "MINUS", "MULT", "DIV", 
			"TILDA", "NOT", "ISVOID", "LT", "EQ", "LE", "COLON", "SEMI", "COMMA", 
			"ASSIGN", "NEW_LINE", "TAB", "LINE_COMMENT", "BLOCK_COMMENT", "BL_COM_START", 
			"BL_COM_END", "LETTER", "DIGIT", "TYPE", "ID", "INT", "BOOL", "STRING", 
			"WS", "INVALID_CHAR"
		};
	}
	public static final String[] ruleNames = makeRuleNames();

	private static String[] makeLiteralNames() {
		return new String[] {
			null, null, "'if'", "'then'", "'else'", "'fi'", "'while'", "'loop'", 
			"'pool'", "'case'", "'esac'", "'of'", "'=>'", "'let'", "'in'", "'new'", 
			"'class'", "'inherits'", "'.'", "'@'", "'{'", "'('", "'}'", "')'", "'+'", 
			"'-'", "'*'", "'/'", "'~'", "'not'", "'isvoid'", "'<'", "'='", "'<='", 
			"':'", "';'", "','", "'<-'", null, null, "'(*'", "'*)'"
		};
	}
	private static final String[] _LITERAL_NAMES = makeLiteralNames();
	private static String[] makeSymbolicNames() {
		return new String[] {
			null, "ERROR", "IF", "THEN", "ELSE", "FI", "WHILE", "LOOP", "POOL", "CASE", 
			"ESAC", "OF", "ARROW", "LET", "IN", "NEW", "CLASS", "INHERITS", "DOT", 
			"AT", "LBRACE", "LPAREN", "RBRACE", "RPAREN", "PLUS", "MINUS", "MULT", 
			"DIV", "TILDA", "NOT", "ISVOID", "LT", "EQ", "LE", "COLON", "SEMI", "COMMA", 
			"ASSIGN", "LINE_COMMENT", "BLOCK_COMMENT", "BL_COM_START", "BL_COM_END", 
			"TYPE", "ID", "INT", "BOOL", "STRING", "WS", "INVALID_CHAR"
		};
	}
	private static final String[] _SYMBOLIC_NAMES = makeSymbolicNames();
	public static final Vocabulary VOCABULARY = new VocabularyImpl(_LITERAL_NAMES, _SYMBOLIC_NAMES);

	/**
	 * @deprecated Use {@link #VOCABULARY} instead.
	 */
	@Deprecated
	public static final String[] tokenNames;
	static {
		tokenNames = new String[_SYMBOLIC_NAMES.length];
		for (int i = 0; i < tokenNames.length; i++) {
			tokenNames[i] = VOCABULARY.getLiteralName(i);
			if (tokenNames[i] == null) {
				tokenNames[i] = VOCABULARY.getSymbolicName(i);
			}

			if (tokenNames[i] == null) {
				tokenNames[i] = "<INVALID>";
			}
		}
	}

	@Override
	@Deprecated
	public String[] getTokenNames() {
		return tokenNames;
	}

	@Override

	public Vocabulary getVocabulary() {
		return VOCABULARY;
	}

	    
	    private void raiseError(String msg) {
	        setText(msg);
	        setType(ERROR);
	    }


	public CoolLexer(CharStream input) {
		super(input);
		_interp = new LexerATNSimulator(this,_ATN,_decisionToDFA,_sharedContextCache);
	}

	@Override
	public String getGrammarFileName() { return "CoolLexer.g4"; }

	@Override
	public String[] getRuleNames() { return ruleNames; }

	@Override
	public String getSerializedATN() { return _serializedATN; }

	@Override
	public String[] getChannelNames() { return channelNames; }

	@Override
	public String[] getModeNames() { return modeNames; }

	@Override
	public ATN getATN() { return _ATN; }

	@Override
	public void action(RuleContext _localctx, int ruleIndex, int actionIndex) {
		switch (ruleIndex) {
		case 39:
			BLOCK_COMMENT_action((RuleContext)_localctx, actionIndex);
			break;
		case 41:
			BL_COM_END_action((RuleContext)_localctx, actionIndex);
			break;
		case 48:
			STRING_action((RuleContext)_localctx, actionIndex);
			break;
		case 50:
			INVALID_CHAR_action((RuleContext)_localctx, actionIndex);
			break;
		}
	}
	private void BLOCK_COMMENT_action(RuleContext _localctx, int actionIndex) {
		switch (actionIndex) {
		case 0:
			 skip();
			break;
		case 1:
			 raiseError("EOF in comment"); 
			break;
		}
	}
	private void BL_COM_END_action(RuleContext _localctx, int actionIndex) {
		switch (actionIndex) {
		case 2:
			 raiseError("Unmatched *)");
			break;
		}
	}
	private void STRING_action(RuleContext _localctx, int actionIndex) {
		switch (actionIndex) {
		case 3:

			         		String str = getText();

			         		String newStr = str
			         			.substring(1, str.length() - 1)
			         			.replace("\\r", "\r")
			         			.replace("\\n", "\n")
			         			.replace("\\t", "\t")
			         			.replaceAll("\\\\(?!\\\\)", "");

			         		if (newStr.length() > 1024) {

			         			raiseError("String constant too long");
			         			return;

			         		} else if (newStr.contains("\u0000")) {
			         			raiseError("String contains null character");
			         			return;
			         		} else {
			         			setText(newStr);
			         		}
			         	
			break;
		case 4:
			 raiseError("Unterminated string constant"); 
			break;
		case 5:
			 raiseError("EOF in string constant"); 
			break;
		}
	}
	private void INVALID_CHAR_action(RuleContext _localctx, int actionIndex) {
		switch (actionIndex) {
		case 6:
			 raiseError("Invalid character: " + getText()); 
			break;
		}
	}

	public static final String _serializedATN =
		"\u0004\u00000\u016c\u0006\uffff\uffff\u0002\u0000\u0007\u0000\u0002\u0001"+
		"\u0007\u0001\u0002\u0002\u0007\u0002\u0002\u0003\u0007\u0003\u0002\u0004"+
		"\u0007\u0004\u0002\u0005\u0007\u0005\u0002\u0006\u0007\u0006\u0002\u0007"+
		"\u0007\u0007\u0002\b\u0007\b\u0002\t\u0007\t\u0002\n\u0007\n\u0002\u000b"+
		"\u0007\u000b\u0002\f\u0007\f\u0002\r\u0007\r\u0002\u000e\u0007\u000e\u0002"+
		"\u000f\u0007\u000f\u0002\u0010\u0007\u0010\u0002\u0011\u0007\u0011\u0002"+
		"\u0012\u0007\u0012\u0002\u0013\u0007\u0013\u0002\u0014\u0007\u0014\u0002"+
		"\u0015\u0007\u0015\u0002\u0016\u0007\u0016\u0002\u0017\u0007\u0017\u0002"+
		"\u0018\u0007\u0018\u0002\u0019\u0007\u0019\u0002\u001a\u0007\u001a\u0002"+
		"\u001b\u0007\u001b\u0002\u001c\u0007\u001c\u0002\u001d\u0007\u001d\u0002"+
		"\u001e\u0007\u001e\u0002\u001f\u0007\u001f\u0002 \u0007 \u0002!\u0007"+
		"!\u0002\"\u0007\"\u0002#\u0007#\u0002$\u0007$\u0002%\u0007%\u0002&\u0007"+
		"&\u0002\'\u0007\'\u0002(\u0007(\u0002)\u0007)\u0002*\u0007*\u0002+\u0007"+
		"+\u0002,\u0007,\u0002-\u0007-\u0002.\u0007.\u0002/\u0007/\u00020\u0007"+
		"0\u00021\u00071\u00022\u00072\u0001\u0000\u0001\u0000\u0001\u0000\u0001"+
		"\u0001\u0001\u0001\u0001\u0001\u0001\u0001\u0001\u0001\u0001\u0002\u0001"+
		"\u0002\u0001\u0002\u0001\u0002\u0001\u0002\u0001\u0003\u0001\u0003\u0001"+
		"\u0003\u0001\u0004\u0001\u0004\u0001\u0004\u0001\u0004\u0001\u0004\u0001"+
		"\u0004\u0001\u0005\u0001\u0005\u0001\u0005\u0001\u0005\u0001\u0005\u0001"+
		"\u0006\u0001\u0006\u0001\u0006\u0001\u0006\u0001\u0006\u0001\u0007\u0001"+
		"\u0007\u0001\u0007\u0001\u0007\u0001\u0007\u0001\b\u0001\b\u0001\b\u0001"+
		"\b\u0001\b\u0001\t\u0001\t\u0001\t\u0001\n\u0001\n\u0001\n\u0001\u000b"+
		"\u0001\u000b\u0001\u000b\u0001\u000b\u0001\f\u0001\f\u0001\f\u0001\r\u0001"+
		"\r\u0001\r\u0001\r\u0001\u000e\u0001\u000e\u0001\u000e\u0001\u000e\u0001"+
		"\u000e\u0001\u000e\u0001\u000f\u0001\u000f\u0001\u000f\u0001\u000f\u0001"+
		"\u000f\u0001\u000f\u0001\u000f\u0001\u000f\u0001\u000f\u0001\u0010\u0001"+
		"\u0010\u0001\u0011\u0001\u0011\u0001\u0012\u0001\u0012\u0001\u0013\u0001"+
		"\u0013\u0001\u0014\u0001\u0014\u0001\u0015\u0001\u0015\u0001\u0016\u0001"+
		"\u0016\u0001\u0017\u0001\u0017\u0001\u0018\u0001\u0018\u0001\u0019\u0001"+
		"\u0019\u0001\u001a\u0001\u001a\u0001\u001b\u0001\u001b\u0001\u001b\u0001"+
		"\u001b\u0001\u001c\u0001\u001c\u0001\u001c\u0001\u001c\u0001\u001c\u0001"+
		"\u001c\u0001\u001c\u0001\u001d\u0001\u001d\u0001\u001e\u0001\u001e\u0001"+
		"\u001f\u0001\u001f\u0001\u001f\u0001 \u0001 \u0001!\u0001!\u0001\"\u0001"+
		"\"\u0001#\u0001#\u0001#\u0001$\u0003$\u00e4\b$\u0001$\u0001$\u0001%\u0001"+
		"%\u0001&\u0001&\u0001&\u0001&\u0005&\u00ee\b&\n&\f&\u00f1\t&\u0001&\u0001"+
		"&\u0003&\u00f5\b&\u0001&\u0001&\u0001\'\u0001\'\u0001\'\u0001\'\u0001"+
		"\'\u0005\'\u00fe\b\'\n\'\f\'\u0101\t\'\u0001\'\u0001\'\u0001\'\u0001\'"+
		"\u0001\'\u0001\'\u0003\'\u0109\b\'\u0001(\u0001(\u0001(\u0001)\u0001)"+
		"\u0001)\u0001)\u0001)\u0001*\u0001*\u0001+\u0001+\u0001,\u0001,\u0001"+
		",\u0001,\u0001,\u0001,\u0001,\u0001,\u0001,\u0001,\u0001,\u0001,\u0001"+
		",\u0001,\u0001,\u0001,\u0001,\u0001,\u0001,\u0001,\u0001,\u0005,\u012c"+
		"\b,\n,\f,\u012f\t,\u0003,\u0131\b,\u0001-\u0001-\u0003-\u0135\b-\u0001"+
		"-\u0001-\u0001-\u0005-\u013a\b-\n-\f-\u013d\t-\u0001.\u0004.\u0140\b."+
		"\u000b.\f.\u0141\u0001/\u0001/\u0001/\u0001/\u0001/\u0001/\u0001/\u0001"+
		"/\u0001/\u0003/\u014d\b/\u00010\u00010\u00010\u00010\u00010\u00010\u0005"+
		"0\u0155\b0\n0\f0\u0158\t0\u00010\u00010\u00010\u00010\u00010\u00010\u0001"+
		"0\u00030\u0161\b0\u00011\u00041\u0164\b1\u000b1\f1\u0165\u00011\u0001"+
		"1\u00012\u00012\u00012\u0003\u00ef\u00ff\u0156\u00003\u0001\u0002\u0003"+
		"\u0003\u0005\u0004\u0007\u0005\t\u0006\u000b\u0007\r\b\u000f\t\u0011\n"+
		"\u0013\u000b\u0015\f\u0017\r\u0019\u000e\u001b\u000f\u001d\u0010\u001f"+
		"\u0011!\u0012#\u0013%\u0014\'\u0015)\u0016+\u0017-\u0018/\u00191\u001a"+
		"3\u001b5\u001c7\u001d9\u001e;\u001f= ?!A\"C#E$G%I\u0000K\u0000M&O\'Q("+
		"S)U\u0000W\u0000Y*[+],_-a.c/e0\u0001\u0000\u0005\u0002\u0000AZaz\u0001"+
		"\u000009\u0001\u0000AZ\u0004\u000009AZ__az\u0003\u0000\t\n\f\r  \u017e"+
		"\u0000\u0001\u0001\u0000\u0000\u0000\u0000\u0003\u0001\u0000\u0000\u0000"+
		"\u0000\u0005\u0001\u0000\u0000\u0000\u0000\u0007\u0001\u0000\u0000\u0000"+
		"\u0000\t\u0001\u0000\u0000\u0000\u0000\u000b\u0001\u0000\u0000\u0000\u0000"+
		"\r\u0001\u0000\u0000\u0000\u0000\u000f\u0001\u0000\u0000\u0000\u0000\u0011"+
		"\u0001\u0000\u0000\u0000\u0000\u0013\u0001\u0000\u0000\u0000\u0000\u0015"+
		"\u0001\u0000\u0000\u0000\u0000\u0017\u0001\u0000\u0000\u0000\u0000\u0019"+
		"\u0001\u0000\u0000\u0000\u0000\u001b\u0001\u0000\u0000\u0000\u0000\u001d"+
		"\u0001\u0000\u0000\u0000\u0000\u001f\u0001\u0000\u0000\u0000\u0000!\u0001"+
		"\u0000\u0000\u0000\u0000#\u0001\u0000\u0000\u0000\u0000%\u0001\u0000\u0000"+
		"\u0000\u0000\'\u0001\u0000\u0000\u0000\u0000)\u0001\u0000\u0000\u0000"+
		"\u0000+\u0001\u0000\u0000\u0000\u0000-\u0001\u0000\u0000\u0000\u0000/"+
		"\u0001\u0000\u0000\u0000\u00001\u0001\u0000\u0000\u0000\u00003\u0001\u0000"+
		"\u0000\u0000\u00005\u0001\u0000\u0000\u0000\u00007\u0001\u0000\u0000\u0000"+
		"\u00009\u0001\u0000\u0000\u0000\u0000;\u0001\u0000\u0000\u0000\u0000="+
		"\u0001\u0000\u0000\u0000\u0000?\u0001\u0000\u0000\u0000\u0000A\u0001\u0000"+
		"\u0000\u0000\u0000C\u0001\u0000\u0000\u0000\u0000E\u0001\u0000\u0000\u0000"+
		"\u0000G\u0001\u0000\u0000\u0000\u0000M\u0001\u0000\u0000\u0000\u0000O"+
		"\u0001\u0000\u0000\u0000\u0000Q\u0001\u0000\u0000\u0000\u0000S\u0001\u0000"+
		"\u0000\u0000\u0000Y\u0001\u0000\u0000\u0000\u0000[\u0001\u0000\u0000\u0000"+
		"\u0000]\u0001\u0000\u0000\u0000\u0000_\u0001\u0000\u0000\u0000\u0000a"+
		"\u0001\u0000\u0000\u0000\u0000c\u0001\u0000\u0000\u0000\u0000e\u0001\u0000"+
		"\u0000\u0000\u0001g\u0001\u0000\u0000\u0000\u0003j\u0001\u0000\u0000\u0000"+
		"\u0005o\u0001\u0000\u0000\u0000\u0007t\u0001\u0000\u0000\u0000\tw\u0001"+
		"\u0000\u0000\u0000\u000b}\u0001\u0000\u0000\u0000\r\u0082\u0001\u0000"+
		"\u0000\u0000\u000f\u0087\u0001\u0000\u0000\u0000\u0011\u008c\u0001\u0000"+
		"\u0000\u0000\u0013\u0091\u0001\u0000\u0000\u0000\u0015\u0094\u0001\u0000"+
		"\u0000\u0000\u0017\u0097\u0001\u0000\u0000\u0000\u0019\u009b\u0001\u0000"+
		"\u0000\u0000\u001b\u009e\u0001\u0000\u0000\u0000\u001d\u00a2\u0001\u0000"+
		"\u0000\u0000\u001f\u00a8\u0001\u0000\u0000\u0000!\u00b1\u0001\u0000\u0000"+
		"\u0000#\u00b3\u0001\u0000\u0000\u0000%\u00b5\u0001\u0000\u0000\u0000\'"+
		"\u00b7\u0001\u0000\u0000\u0000)\u00b9\u0001\u0000\u0000\u0000+\u00bb\u0001"+
		"\u0000\u0000\u0000-\u00bd\u0001\u0000\u0000\u0000/\u00bf\u0001\u0000\u0000"+
		"\u00001\u00c1\u0001\u0000\u0000\u00003\u00c3\u0001\u0000\u0000\u00005"+
		"\u00c5\u0001\u0000\u0000\u00007\u00c7\u0001\u0000\u0000\u00009\u00cb\u0001"+
		"\u0000\u0000\u0000;\u00d2\u0001\u0000\u0000\u0000=\u00d4\u0001\u0000\u0000"+
		"\u0000?\u00d6\u0001\u0000\u0000\u0000A\u00d9\u0001\u0000\u0000\u0000C"+
		"\u00db\u0001\u0000\u0000\u0000E\u00dd\u0001\u0000\u0000\u0000G\u00df\u0001"+
		"\u0000\u0000\u0000I\u00e3\u0001\u0000\u0000\u0000K\u00e7\u0001\u0000\u0000"+
		"\u0000M\u00e9\u0001\u0000\u0000\u0000O\u00f8\u0001\u0000\u0000\u0000Q"+
		"\u010a\u0001\u0000\u0000\u0000S\u010d\u0001\u0000\u0000\u0000U\u0112\u0001"+
		"\u0000\u0000\u0000W\u0114\u0001\u0000\u0000\u0000Y\u0130\u0001\u0000\u0000"+
		"\u0000[\u0134\u0001\u0000\u0000\u0000]\u013f\u0001\u0000\u0000\u0000_"+
		"\u014c\u0001\u0000\u0000\u0000a\u014e\u0001\u0000\u0000\u0000c\u0163\u0001"+
		"\u0000\u0000\u0000e\u0169\u0001\u0000\u0000\u0000gh\u0005i\u0000\u0000"+
		"hi\u0005f\u0000\u0000i\u0002\u0001\u0000\u0000\u0000jk\u0005t\u0000\u0000"+
		"kl\u0005h\u0000\u0000lm\u0005e\u0000\u0000mn\u0005n\u0000\u0000n\u0004"+
		"\u0001\u0000\u0000\u0000op\u0005e\u0000\u0000pq\u0005l\u0000\u0000qr\u0005"+
		"s\u0000\u0000rs\u0005e\u0000\u0000s\u0006\u0001\u0000\u0000\u0000tu\u0005"+
		"f\u0000\u0000uv\u0005i\u0000\u0000v\b\u0001\u0000\u0000\u0000wx\u0005"+
		"w\u0000\u0000xy\u0005h\u0000\u0000yz\u0005i\u0000\u0000z{\u0005l\u0000"+
		"\u0000{|\u0005e\u0000\u0000|\n\u0001\u0000\u0000\u0000}~\u0005l\u0000"+
		"\u0000~\u007f\u0005o\u0000\u0000\u007f\u0080\u0005o\u0000\u0000\u0080"+
		"\u0081\u0005p\u0000\u0000\u0081\f\u0001\u0000\u0000\u0000\u0082\u0083"+
		"\u0005p\u0000\u0000\u0083\u0084\u0005o\u0000\u0000\u0084\u0085\u0005o"+
		"\u0000\u0000\u0085\u0086\u0005l\u0000\u0000\u0086\u000e\u0001\u0000\u0000"+
		"\u0000\u0087\u0088\u0005c\u0000\u0000\u0088\u0089\u0005a\u0000\u0000\u0089"+
		"\u008a\u0005s\u0000\u0000\u008a\u008b\u0005e\u0000\u0000\u008b\u0010\u0001"+
		"\u0000\u0000\u0000\u008c\u008d\u0005e\u0000\u0000\u008d\u008e\u0005s\u0000"+
		"\u0000\u008e\u008f\u0005a\u0000\u0000\u008f\u0090\u0005c\u0000\u0000\u0090"+
		"\u0012\u0001\u0000\u0000\u0000\u0091\u0092\u0005o\u0000\u0000\u0092\u0093"+
		"\u0005f\u0000\u0000\u0093\u0014\u0001\u0000\u0000\u0000\u0094\u0095\u0005"+
		"=\u0000\u0000\u0095\u0096\u0005>\u0000\u0000\u0096\u0016\u0001\u0000\u0000"+
		"\u0000\u0097\u0098\u0005l\u0000\u0000\u0098\u0099\u0005e\u0000\u0000\u0099"+
		"\u009a\u0005t\u0000\u0000\u009a\u0018\u0001\u0000\u0000\u0000\u009b\u009c"+
		"\u0005i\u0000\u0000\u009c\u009d\u0005n\u0000\u0000\u009d\u001a\u0001\u0000"+
		"\u0000\u0000\u009e\u009f\u0005n\u0000\u0000\u009f\u00a0\u0005e\u0000\u0000"+
		"\u00a0\u00a1\u0005w\u0000\u0000\u00a1\u001c\u0001\u0000\u0000\u0000\u00a2"+
		"\u00a3\u0005c\u0000\u0000\u00a3\u00a4\u0005l\u0000\u0000\u00a4\u00a5\u0005"+
		"a\u0000\u0000\u00a5\u00a6\u0005s\u0000\u0000\u00a6\u00a7\u0005s\u0000"+
		"\u0000\u00a7\u001e\u0001\u0000\u0000\u0000\u00a8\u00a9\u0005i\u0000\u0000"+
		"\u00a9\u00aa\u0005n\u0000\u0000\u00aa\u00ab\u0005h\u0000\u0000\u00ab\u00ac"+
		"\u0005e\u0000\u0000\u00ac\u00ad\u0005r\u0000\u0000\u00ad\u00ae\u0005i"+
		"\u0000\u0000\u00ae\u00af\u0005t\u0000\u0000\u00af\u00b0\u0005s\u0000\u0000"+
		"\u00b0 \u0001\u0000\u0000\u0000\u00b1\u00b2\u0005.\u0000\u0000\u00b2\""+
		"\u0001\u0000\u0000\u0000\u00b3\u00b4\u0005@\u0000\u0000\u00b4$\u0001\u0000"+
		"\u0000\u0000\u00b5\u00b6\u0005{\u0000\u0000\u00b6&\u0001\u0000\u0000\u0000"+
		"\u00b7\u00b8\u0005(\u0000\u0000\u00b8(\u0001\u0000\u0000\u0000\u00b9\u00ba"+
		"\u0005}\u0000\u0000\u00ba*\u0001\u0000\u0000\u0000\u00bb\u00bc\u0005)"+
		"\u0000\u0000\u00bc,\u0001\u0000\u0000\u0000\u00bd\u00be\u0005+\u0000\u0000"+
		"\u00be.\u0001\u0000\u0000\u0000\u00bf\u00c0\u0005-\u0000\u0000\u00c00"+
		"\u0001\u0000\u0000\u0000\u00c1\u00c2\u0005*\u0000\u0000\u00c22\u0001\u0000"+
		"\u0000\u0000\u00c3\u00c4\u0005/\u0000\u0000\u00c44\u0001\u0000\u0000\u0000"+
		"\u00c5\u00c6\u0005~\u0000\u0000\u00c66\u0001\u0000\u0000\u0000\u00c7\u00c8"+
		"\u0005n\u0000\u0000\u00c8\u00c9\u0005o\u0000\u0000\u00c9\u00ca\u0005t"+
		"\u0000\u0000\u00ca8\u0001\u0000\u0000\u0000\u00cb\u00cc\u0005i\u0000\u0000"+
		"\u00cc\u00cd\u0005s\u0000\u0000\u00cd\u00ce\u0005v\u0000\u0000\u00ce\u00cf"+
		"\u0005o\u0000\u0000\u00cf\u00d0\u0005i\u0000\u0000\u00d0\u00d1\u0005d"+
		"\u0000\u0000\u00d1:\u0001\u0000\u0000\u0000\u00d2\u00d3\u0005<\u0000\u0000"+
		"\u00d3<\u0001\u0000\u0000\u0000\u00d4\u00d5\u0005=\u0000\u0000\u00d5>"+
		"\u0001\u0000\u0000\u0000\u00d6\u00d7\u0005<\u0000\u0000\u00d7\u00d8\u0005"+
		"=\u0000\u0000\u00d8@\u0001\u0000\u0000\u0000\u00d9\u00da\u0005:\u0000"+
		"\u0000\u00daB\u0001\u0000\u0000\u0000\u00db\u00dc\u0005;\u0000\u0000\u00dc"+
		"D\u0001\u0000\u0000\u0000\u00dd\u00de\u0005,\u0000\u0000\u00deF\u0001"+
		"\u0000\u0000\u0000\u00df\u00e0\u0005<\u0000\u0000\u00e0\u00e1\u0005-\u0000"+
		"\u0000\u00e1H\u0001\u0000\u0000\u0000\u00e2\u00e4\u0005\r\u0000\u0000"+
		"\u00e3\u00e2\u0001\u0000\u0000\u0000\u00e3\u00e4\u0001\u0000\u0000\u0000"+
		"\u00e4\u00e5\u0001\u0000\u0000\u0000\u00e5\u00e6\u0005\n\u0000\u0000\u00e6"+
		"J\u0001\u0000\u0000\u0000\u00e7\u00e8\u0005\t\u0000\u0000\u00e8L\u0001"+
		"\u0000\u0000\u0000\u00e9\u00ea\u0005-\u0000\u0000\u00ea\u00eb\u0005-\u0000"+
		"\u0000\u00eb\u00ef\u0001\u0000\u0000\u0000\u00ec\u00ee\t\u0000\u0000\u0000"+
		"\u00ed\u00ec\u0001\u0000\u0000\u0000\u00ee\u00f1\u0001\u0000\u0000\u0000"+
		"\u00ef\u00f0\u0001\u0000\u0000\u0000\u00ef\u00ed\u0001\u0000\u0000\u0000"+
		"\u00f0\u00f4\u0001\u0000\u0000\u0000\u00f1\u00ef\u0001\u0000\u0000\u0000"+
		"\u00f2\u00f5\u0003I$\u0000\u00f3\u00f5\u0005\u0000\u0000\u0001\u00f4\u00f2"+
		"\u0001\u0000\u0000\u0000\u00f4\u00f3\u0001\u0000\u0000\u0000\u00f5\u00f6"+
		"\u0001\u0000\u0000\u0000\u00f6\u00f7\u0006&\u0000\u0000\u00f7N\u0001\u0000"+
		"\u0000\u0000\u00f8\u00f9\u0005(\u0000\u0000\u00f9\u00fa\u0005*\u0000\u0000"+
		"\u00fa\u00ff\u0001\u0000\u0000\u0000\u00fb\u00fe\u0003O\'\u0000\u00fc"+
		"\u00fe\t\u0000\u0000\u0000\u00fd\u00fb\u0001\u0000\u0000\u0000\u00fd\u00fc"+
		"\u0001\u0000\u0000\u0000\u00fe\u0101\u0001\u0000\u0000\u0000\u00ff\u0100"+
		"\u0001\u0000\u0000\u0000\u00ff\u00fd\u0001\u0000\u0000\u0000\u0100\u0108"+
		"\u0001\u0000\u0000\u0000\u0101\u00ff\u0001\u0000\u0000\u0000\u0102\u0103"+
		"\u0005*\u0000\u0000\u0103\u0104\u0005)\u0000\u0000\u0104\u0105\u0001\u0000"+
		"\u0000\u0000\u0105\u0109\u0006\'\u0001\u0000\u0106\u0107\u0005\u0000\u0000"+
		"\u0001\u0107\u0109\u0006\'\u0002\u0000\u0108\u0102\u0001\u0000\u0000\u0000"+
		"\u0108\u0106\u0001\u0000\u0000\u0000\u0109P\u0001\u0000\u0000\u0000\u010a"+
		"\u010b\u0005(\u0000\u0000\u010b\u010c\u0005*\u0000\u0000\u010cR\u0001"+
		"\u0000\u0000\u0000\u010d\u010e\u0005*\u0000\u0000\u010e\u010f\u0005)\u0000"+
		"\u0000\u010f\u0110\u0001\u0000\u0000\u0000\u0110\u0111\u0006)\u0003\u0000"+
		"\u0111T\u0001\u0000\u0000\u0000\u0112\u0113\u0007\u0000\u0000\u0000\u0113"+
		"V\u0001\u0000\u0000\u0000\u0114\u0115\u0007\u0001\u0000\u0000\u0115X\u0001"+
		"\u0000\u0000\u0000\u0116\u0117\u0005I\u0000\u0000\u0117\u0118\u0005n\u0000"+
		"\u0000\u0118\u0131\u0005t\u0000\u0000\u0119\u011a\u0005S\u0000\u0000\u011a"+
		"\u011b\u0005t\u0000\u0000\u011b\u011c\u0005r\u0000\u0000\u011c\u011d\u0005"+
		"i\u0000\u0000\u011d\u011e\u0005n\u0000\u0000\u011e\u0131\u0005g\u0000"+
		"\u0000\u011f\u0120\u0005B\u0000\u0000\u0120\u0121\u0005o\u0000\u0000\u0121"+
		"\u0122\u0005o\u0000\u0000\u0122\u0131\u0005l\u0000\u0000\u0123\u0124\u0005"+
		"O\u0000\u0000\u0124\u0125\u0005b\u0000\u0000\u0125\u0126\u0005j\u0000"+
		"\u0000\u0126\u0127\u0005e\u0000\u0000\u0127\u0128\u0005c\u0000\u0000\u0128"+
		"\u0131\u0005t\u0000\u0000\u0129\u012d\u0007\u0002\u0000\u0000\u012a\u012c"+
		"\u0007\u0003\u0000\u0000\u012b\u012a\u0001\u0000\u0000\u0000\u012c\u012f"+
		"\u0001\u0000\u0000\u0000\u012d\u012b\u0001\u0000\u0000\u0000\u012d\u012e"+
		"\u0001\u0000\u0000\u0000\u012e\u0131\u0001\u0000\u0000\u0000\u012f\u012d"+
		"\u0001\u0000\u0000\u0000\u0130\u0116\u0001\u0000\u0000\u0000\u0130\u0119"+
		"\u0001\u0000\u0000\u0000\u0130\u011f\u0001\u0000\u0000\u0000\u0130\u0123"+
		"\u0001\u0000\u0000\u0000\u0130\u0129\u0001\u0000\u0000\u0000\u0131Z\u0001"+
		"\u0000\u0000\u0000\u0132\u0135\u0003U*\u0000\u0133\u0135\u0005_\u0000"+
		"\u0000\u0134\u0132\u0001\u0000\u0000\u0000\u0134\u0133\u0001\u0000\u0000"+
		"\u0000\u0135\u013b\u0001\u0000\u0000\u0000\u0136\u013a\u0003U*\u0000\u0137"+
		"\u013a\u0005_\u0000\u0000\u0138\u013a\u0003W+\u0000\u0139\u0136\u0001"+
		"\u0000\u0000\u0000\u0139\u0137\u0001\u0000\u0000\u0000\u0139\u0138\u0001"+
		"\u0000\u0000\u0000\u013a\u013d\u0001\u0000\u0000\u0000\u013b\u0139\u0001"+
		"\u0000\u0000\u0000\u013b\u013c\u0001\u0000\u0000\u0000\u013c\\\u0001\u0000"+
		"\u0000\u0000\u013d\u013b\u0001\u0000\u0000\u0000\u013e\u0140\u0003W+\u0000"+
		"\u013f\u013e\u0001\u0000\u0000\u0000\u0140\u0141\u0001\u0000\u0000\u0000"+
		"\u0141\u013f\u0001\u0000\u0000\u0000\u0141\u0142\u0001\u0000\u0000\u0000"+
		"\u0142^\u0001\u0000\u0000\u0000\u0143\u0144\u0005t\u0000\u0000\u0144\u0145"+
		"\u0005r\u0000\u0000\u0145\u0146\u0005u\u0000\u0000\u0146\u014d\u0005e"+
		"\u0000\u0000\u0147\u0148\u0005f\u0000\u0000\u0148\u0149\u0005a\u0000\u0000"+
		"\u0149\u014a\u0005l\u0000\u0000\u014a\u014b\u0005s\u0000\u0000\u014b\u014d"+
		"\u0005e\u0000\u0000\u014c\u0143\u0001\u0000\u0000\u0000\u014c\u0147\u0001"+
		"\u0000\u0000\u0000\u014d`\u0001\u0000\u0000\u0000\u014e\u0156\u0005\""+
		"\u0000\u0000\u014f\u0150\u0005\\\u0000\u0000\u0150\u0155\u0005\"\u0000"+
		"\u0000\u0151\u0152\u0005\\\u0000\u0000\u0152\u0155\u0003I$\u0000\u0153"+
		"\u0155\t\u0000\u0000\u0000\u0154\u014f\u0001\u0000\u0000\u0000\u0154\u0151"+
		"\u0001\u0000\u0000\u0000\u0154\u0153\u0001\u0000\u0000\u0000\u0155\u0158"+
		"\u0001\u0000\u0000\u0000\u0156\u0157\u0001\u0000\u0000\u0000\u0156\u0154"+
		"\u0001\u0000\u0000\u0000\u0157\u0160\u0001\u0000\u0000\u0000\u0158\u0156"+
		"\u0001\u0000\u0000\u0000\u0159\u015a\u0005\"\u0000\u0000\u015a\u0161\u0006"+
		"0\u0004\u0000\u015b\u015c\u0003I$\u0000\u015c\u015d\u00060\u0005\u0000"+
		"\u015d\u0161\u0001\u0000\u0000\u0000\u015e\u015f\u0005\u0000\u0000\u0001"+
		"\u015f\u0161\u00060\u0006\u0000\u0160\u0159\u0001\u0000\u0000\u0000\u0160"+
		"\u015b\u0001\u0000\u0000\u0000\u0160\u015e\u0001\u0000\u0000\u0000\u0161"+
		"b\u0001\u0000\u0000\u0000\u0162\u0164\u0007\u0004\u0000\u0000\u0163\u0162"+
		"\u0001\u0000\u0000\u0000\u0164\u0165\u0001\u0000\u0000\u0000\u0165\u0163"+
		"\u0001\u0000\u0000\u0000\u0165\u0166\u0001\u0000\u0000\u0000\u0166\u0167"+
		"\u0001\u0000\u0000\u0000\u0167\u0168\u00061\u0000\u0000\u0168d\u0001\u0000"+
		"\u0000\u0000\u0169\u016a\t\u0000\u0000\u0000\u016a\u016b\u00062\u0007"+
		"\u0000\u016bf\u0001\u0000\u0000\u0000\u0012\u0000\u00e3\u00ef\u00f4\u00fd"+
		"\u00ff\u0108\u012d\u0130\u0134\u0139\u013b\u0141\u014c\u0154\u0156\u0160"+
		"\u0165\b\u0006\u0000\u0000\u0001\'\u0000\u0001\'\u0001\u0001)\u0002\u0001"+
		"0\u0003\u00010\u0004\u00010\u0005\u00012\u0006";
	public static final ATN _ATN =
		new ATNDeserializer().deserialize(_serializedATN.toCharArray());
	static {
		_decisionToDFA = new DFA[_ATN.getNumberOfDecisions()];
		for (int i = 0; i < _ATN.getNumberOfDecisions(); i++) {
			_decisionToDFA[i] = new DFA(_ATN.getDecisionState(i), i);
		}
	}
}